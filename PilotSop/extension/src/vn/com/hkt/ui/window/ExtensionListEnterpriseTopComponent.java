/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.ui.window;

import java.awt.GridLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.ViewCookie;
import org.openide.util.LookupListener;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.basic.api.IEnterpriseBN;
import vn.com.hkt.enterprise.ext.dao.EnterpriseExtBN;
import vn.com.hkt.enterprise.ext.entity.EnterpriseExt;
import vn.com.hkt.pilot.entities.Enterprise;
import vn.com.hkt.pilot.viewer.api.FilterCookie;
import vn.com.hkt.pilot.viewer.api.IEnterpriseExtViewer;
import vn.com.hkt.pilot.viewer.api.IEnterpriseViewer;
import vn.com.hkt.pilot.viewer.api.RemoveCookie;
import vn.com.hkt.ui.panel.ExtensionListEnterprisePanel;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.ui.window//ExtensionListEnterprise//EN",
autostore = false)
@TopComponent.Description(preferredID = "ExtensionListEnterpriseTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.ui.window.ExtensionListEnterpriseTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ExtensionListEnterpriseAction",
preferredID = "ExtensionListEnterpriseTopComponent")
//@ServiceProvider(service = IEnterpriseExtViewer.class)
public final class ExtensionListEnterpriseTopComponent extends TopComponent implements IEnterpriseExtViewer, ViewCookie, RemoveCookie,
        LookupListener, FilterCookie {

    private ExtensionListEnterprisePanel listEnterprisePanel;
    private DefaultTableModel model;
    private IEnterpriseBN enterdao;
    private EnterpriseExtBN enterpriseExtBN;
    private InstanceContent contentForBasic;
    private InstanceContent contentForExt;
    private AbstractLookup lookup;
    private Lookup.Result<Enterprise> result;
    private IEnterpriseViewer enterpriseViewer;
    private String idEnterprise;
    
    private JPanel panelExt1;

    public ExtensionListEnterpriseTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExtensionListEnterpriseTopComponent.class, "CTL_ExtensionListEnterpriseTopComponent"));
        setToolTipText(NbBundle.getMessage(ExtensionListEnterpriseTopComponent.class, "HINT_ExtensionListEnterpriseTopComponent"));
        listEnterprisePanel = new ExtensionListEnterprisePanel();
        panelExt1 = new JPanel(new GridLayout());
        
        enterdao = Lookup.getDefault().lookup(IEnterpriseBN.class);
        enterpriseViewer = Lookup.getDefault().lookup(IEnterpriseViewer.class);
        
        panelExt1.setSize(960,300);
        if(enterpriseViewer!=null){
            panelExt1.add(enterpriseViewer.getEnterpriseViewer());
        }
        panelExt1.add(listEnterprisePanel);
        enterpriseExtBN = new EnterpriseExtBN();

        result = enterpriseViewer.getEnterpriseLookup().lookupResult(Enterprise.class);
        result.addLookupListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void loadData() {
        String[] header = {"Địa chỉ", "Tell", "Fax", "Email", "Web"};
        model = new DefaultTableModel(header, 0);
        List<Enterprise> list1 = enterdao.getAllEnterprise();
        List<EnterpriseExt> list2 = new ArrayList<EnterpriseExt>();
        list2 = enterpriseExtBN.getAllEnterpriseExt();

        int n = list1.size();
        int m = list2.size();
        int i, j;
        int flag = -1;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (list1.get(i).getEnterpriseID().equals(list2.get(j).getEnterpriseID())) {
                    flag = j;
                }
            }

            if (flag != -1) {
                EnterpriseExt bean = list2.get(flag);
                String[] rows = {bean.getEnterpriseAddress(), bean.getEnterpriseTel(), bean.getEnterpriseFax(),
                    bean.getEnterpriseEmail(), bean.getEnterpriseWeb()};
                model.addRow(rows);
                flag = -1;
            } else {
                String[] rows = {"", "", "", "", ""};
                model.addRow(rows);
            }
        }
        listEnterprisePanel.getTablleListExtensionE().setModel(model);
    }

    @Override
    public JPanel getEnterpriseExtViewer() {
        return panelExt1;
    }

    @Override
    public Lookup getEnterpriseExtLookup() {
        return this.lookup;
    }

    @Override
    public void view() {
        loadData();
    }

    @Override
    public void remove() throws IOException {
        if (enterpriseExtBN!=null) {
            EnterpriseExt enterpriseExt = enterpriseExtBN.getEnterpriseExtByID(idEnterprise); // Tìm kiếm Enterprise theo ID
            if(enterpriseExt!=null){
                enterpriseExtBN.deleteEnterpriseExt(enterpriseExt);
            }            
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        result = (Lookup.Result) le.getSource();
        Collection<? extends Enterprise> allEnterprise = result.allInstances();
        if (allEnterprise != null) {
            for (Enterprise bean : allEnterprise) {
                idEnterprise = bean.getEnterpriseID();
            }
        }
    }

    protected void filterByID(String id) {
        String[] header = {"Địa chỉ", "Tell", "Fax", "Email", "Web"};
        model = new DefaultTableModel(header, 0);
        List<EnterpriseExt> list2 = new ArrayList<EnterpriseExt>();
        List<Enterprise> list = new ArrayList<Enterprise>();
        list = enterdao.filterEnterpriseByID(id);
        list2 = enterpriseExtBN.filterEnterpriseExtByID(id);
        
        int n = list.size();
        int m = list2.size();
        int i, j;
        int flag = -1;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (list.get(i).getEnterpriseID().equals(list2.get(j).getEnterpriseID())) {
                    flag = j;
                }
            }

            if (flag != -1) {
                EnterpriseExt bean = list2.get(flag);
                String[] rows = {bean.getEnterpriseAddress(), bean.getEnterpriseTel(), bean.getEnterpriseFax(),
                    bean.getEnterpriseEmail(), bean.getEnterpriseWeb()};
                model.addRow(rows);
                flag = -1;
            } else {
                String[] rows = {"", "", "", "", ""};
                model.addRow(rows);
            }
        }
        listEnterprisePanel.getTablleListExtensionE().setModel(model);
    }

    protected void filterByName(String name) {
        String[] header = {"Địa chỉ", "Tell", "Fax", "Email", "Web"};
        model = new DefaultTableModel(header, 0);
        List<EnterpriseExt> list2 = new ArrayList<EnterpriseExt>();
        List<Enterprise> list = new ArrayList<Enterprise>();
        list = enterdao.filterEnterpriseByName(name);
        list2 = enterpriseExtBN.filterEnterpriseExtByName(name);
        
        int n = list.size();
        int m = list2.size();
        int i, j;
        int flag = -1;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (list.get(i).getEnterpriseName().equals(list2.get(j).getEnterpriseName())) {
                    flag = j;
                }
            }

            if (flag != -1) {
                EnterpriseExt bean = list2.get(flag);
                String[] rows = {bean.getEnterpriseAddress(), bean.getEnterpriseTel(), bean.getEnterpriseFax(),
                    bean.getEnterpriseEmail(), bean.getEnterpriseWeb()};
                model.addRow(rows);
                flag = -1;
            } else {
                String[] rows = {"", "", "", "", ""};
                model.addRow(rows);
            }
        }
        listEnterprisePanel.getTablleListExtensionE().setModel(model);
    }

    @Override
    public void filterID(String tk) throws IOException {
        filterByID(tk);
    }

    @Override
    public void filterName(String tk) throws IOException {
        filterByName(tk);
    }

    @Override
    public String toString() {
        return "Enterprise Extension";
    }

    @Override
    public Lookup getEnterpriseLookup() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.hrm.person.ui;

import java.awt.Color;
import vn.com.hkt.pilot.entities.Person;
import vn.com.hkt.basic.api.IPersonBN;
import vn.com.hkt.hrm.person.ui.PersonCell;
import vn.com.hkt.hrm.person.ui.ListPersonPanel;
import vn.com.hkt.hrm.person.ui.PersonPanel;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import vn.com.hkt.pilot.ui.setup.StripedTableCellRenderer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.hrm.person.ui//ListPerson//EN",
autostore = false)
@TopComponent.Description(preferredID = "ListPersonTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.hrm.person.ui.ListPersonTopComponent")
@ActionReference(path = "Menu/Nhân sự" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ListPersonAction",
preferredID = "ListPersonTopComponent")
public final class ListPersonTopComponent extends TopComponent implements ActionListener, MouseListener {

    private ListPersonPanel listPersonPanel = new ListPersonPanel();
    private DefaultTableModel model;
    private IPersonBN personBN;
    private static int row;

    public ListPersonTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ListPersonTopComponent.class, "CTL_ListPersonTopComponent"));
        setToolTipText(NbBundle.getMessage(ListPersonTopComponent.class, "HINT_ListPersonTopComponent"));

        panelForm.setLayout(new GridLayout());
        panelForm.add(listPersonPanel);

        listPersonPanel.getTableListP().addMouseListener(this);

         buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(this);
        buttonExit.addActionListener(this);
        buttonHelp.addActionListener(this);
        buttonSave.addActionListener(this);
        buttonDelete.addActionListener(this);
        this.personBN = Lookup.getDefault().lookup(IPersonBN.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForm = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        cboTimkiem = new javax.swing.JComboBox();
        panleButton = new javax.swing.JPanel();
        buttonEdit = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.jLabel1.text")); // NOI18N

        txtTimKiem.setText(org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.txtTimKiem.text")); // NOI18N
        txtTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtTimKiemMousePressed(evt);
            }
        });
        txtTimKiem.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtTimKiemCaretUpdate(evt);
            }
        });

        cboTimkiem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " Họ Tên", "ID", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panleButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(buttonEdit, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.buttonEdit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonSave, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.buttonSave.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonExit, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.buttonExit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonHelp, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.buttonHelp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonDelete, org.openide.util.NbBundle.getMessage(ListPersonTopComponent.class, "ListPersonTopComponent.buttonDelete.text")); // NOI18N

        javax.swing.GroupLayout panleButtonLayout = new javax.swing.GroupLayout(panleButton);
        panleButton.setLayout(panleButtonLayout);
        panleButtonLayout.setHorizontalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        panleButtonLayout.setVerticalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonSave)
                    .addComponent(buttonDelete)
                    .addComponent(buttonExit)
                    .addComponent(buttonHelp))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtTimKiemCaretUpdate
        String strTim = txtTimKiem.getText().trim();
        if (cboTimkiem.getSelectedIndex() == 0) {
            String[] header = {"Họ (first name)", "Tên (last name)", "Công ty", "Bộ phận", "Chức vụ", "Mã Person", "Ảnh"};
            model = new DefaultTableModel(header, 0);
            List<Person> list = new ArrayList<Person>();
            list = personBN.filterPersonByName(strTim);
            list = personBN.filterPersonByLastName(strTim);
            for (Person bean : list) {
                String[] rows = {bean.getFirstName(), bean.getLastName(), bean.getEnterpriseID(), bean.getDepartmentName(), bean.getPosition(), bean.getPersonID()};
                model.addRow(rows);
            }
            listPersonPanel.getTableListP().setModel(model);
        } else if (cboTimkiem.getSelectedIndex() == 1) {
            String[] header = {"Họ (first name)", "Tên (last name)", "Công ty", "Bộ phận", "Chức vụ", "Mã Person", "Ảnh"};
            model = new DefaultTableModel(header, 0);
            List<Person> list = new ArrayList<Person>();
            list = personBN.filterPersonByID(strTim);
            for (Person bean : list) {
                String[] rows = {bean.getFirstName(), bean.getLastName(), bean.getEnterpriseID(), bean.getDepartmentName(), bean.getPosition(), bean.getPersonID()};
                model.addRow(rows);
            }
            listPersonPanel.getTableListP().setModel(model);
            
        }
        setupTable();

    }//GEN-LAST:event_txtTimKiemCaretUpdate

    private void txtTimKiemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMousePressed
        txtTimKiem.setText("");
    }//GEN-LAST:event_txtTimKiemMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox cboTimkiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panleButton;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    public void loadData() {
        String[] header = {"Họ (first name)", "Tên (last name)", "Công ty", "Bộ phận ", " Chức vụ", "Mã Person", "Ảnh"};
        model = new DefaultTableModel(header, 0);
        List<Person> list = new ArrayList<Person>();
        list = personBN.getAllPerson();
        for (Person bean : list) {
            String[] rows = {bean.getFirstName(), bean.getLastName(), bean.getEnterpriseID(), bean.getDepartmentName(), bean.getPosition(), bean.getPersonID(), " "};
            model.addRow(rows);
        }
        listPersonPanel.getTableListP().setModel(model);
        setupTable();
    }

    @Override
    public void componentOpened() {
        loadData();
        //buttonEdit.setEnabled(true);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton button = (JButton) e.getSource();
        if (button == buttonExit) {
            this.close();
        }
        if (button == buttonEdit) {
            buttonEdit.setEnabled(false);
        }

        if (button == buttonDelete) {
            int i = listPersonPanel.getTableListP().getSelectedRow();
            String strRow = listPersonPanel.getTableListP().getValueAt(i, 5).toString().trim();

            Person person = personBN.getPersonByID(strRow);
            personBN.deletePerson(person);
            model.removeRow(i);
        }
        if (button == buttonSave) {
            Person bean = null;

            String namef = listPersonPanel.getTableListP().getValueAt(row, 0).toString().trim();
            String namel = listPersonPanel.getTableListP().getValueAt(row, 1).toString().trim();
            String cty = listPersonPanel.getTableListP().getValueAt(row, 2).toString().trim();
            String bophan = listPersonPanel.getTableListP().getValueAt(row, 3).toString().trim();
            String chucvu = listPersonPanel.getTableListP().getValueAt(row, 4).toString().trim();
            String id = listPersonPanel.getTableListP().getValueAt(row, 5).toString().trim();

            bean = new Person(id, namef, namel, cty, bophan, chucvu );
            personBN.updatePerson(bean);
            this.close();
            this.open();
        }
    }

    public void mouseEvent(MouseEvent e) {
        int rows = listPersonPanel.getTableListP().getRowCount();
        int slectedRow = listPersonPanel.getTableListP().getSelectedRow();
        PersonTopComponent personTopComponent = new PersonTopComponent();
        for (int i = 0; i < rows; i++) {
            if (i == slectedRow) {
                if (e.getClickCount() == 2) {
                    if (buttonEdit.isEnabled()==false) {
                        String strRow = listPersonPanel.getTableListP().getValueAt(i, 5).toString().trim();
                        Person person = personBN.getPersonByID(strRow);
                        personTopComponent.getPersonPanel().getTabelPerson().setModel(new javax.swing.table.DefaultTableModel(
                                new Object[][]{
                                    {"Họ (first name)", person.getFirstName()},
                                    {"Tên (last name)", person.getLastName()},
                                    {"Công ty", person.getEnterpriseID()},
                                    {"Bộ phận", person.getDepartmentName()},
                                    {"Chức vụ", person.getPosition()},
                                    {"Mã Person", person.getPersonID()},
                                    {"Ảnh", " "}
                                },
                                new String[]{
                                    "", ""
                                }) {

                            boolean[] canEdit = new boolean[]{
                                false, true
                            };

                            @Override
                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit[columnIndex];
                            }
                        });
                        PersonCell personCell = new PersonCell();
                        personCell.getTxtFName().setText(person.getFirstName());
                        personCell.getTxtLName().setText(person.getLastName());
                        personCell.getTxtIdP().setText(person.getPersonID());

                        personTopComponent.getPersonPanel().getTabelPerson().getColumnModel().getColumn(1).setCellEditor(personCell);
                        personTopComponent.getPersonPanel().getTabelPerson().setEnabled(false);
                        personTopComponent.getPanelForm().removeAll();
                        personTopComponent.getPanelForm().add(personTopComponent.getPersonPanel());
                        personTopComponent.getButtonEdit().setEnabled(true);
                        personTopComponent.open();
                        this.close();
                    }
                    if (buttonEdit.isEnabled()) {
                        row = i;
                    }
                    setupTable();
                }

            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mousePressed(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
      //  mouseEvent(e);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
      //  mouseEvent(e);
    }

    @Override
    public void mouseExited(MouseEvent e) {
       // mouseEvent(e);
    }
    
    protected void setupTable(){
        StripedTableCellRenderer.installInColumn(listPersonPanel.getTableListP(), new Color(250, 251, 252), null, new Color(242, 242, 242),null);
    }
}

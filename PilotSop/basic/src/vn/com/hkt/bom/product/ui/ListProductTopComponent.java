/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.bom.product.ui;

import java.awt.Color;
import vn.com.hkt.pilot.entities.Product;
import vn.com.hkt.basic.api.IProductBN;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import vn.com.hkt.pilot.ui.setup.StripedTableCellRenderer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.bom.product.ui//ListProduct//EN",
autostore = false)
@TopComponent.Description(preferredID = "ListProductTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.bom.product.ui.ListProductTopComponent")
@ActionReference(path = "Menu/Sản Xuất & Đầu Vào" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ListProductAction",
preferredID = "ListProductTopComponent")
public final class ListProductTopComponent extends TopComponent implements ActionListener, MouseListener {

    private ListProductPanel listProductPanel = new ListProductPanel();
    private DefaultTableModel model;
    private IProductBN productBN;
    private static int row;

    public ListProductTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ListProductTopComponent.class, "CTL_ListProductTopComponent"));
        setToolTipText(NbBundle.getMessage(ListProductTopComponent.class, "HINT_ListProductTopComponent"));

        panelForm.setLayout(new GridLayout());
        panelForm.add(listProductPanel);

        listProductPanel.getTableListPr().addMouseListener(this);

         buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(this);
        buttonExit.addActionListener(this);
        buttonHelp.addActionListener(this);
        buttonSave.addActionListener(this);
        buttonDelete.addActionListener(this);
        this.productBN = Lookup.getDefault().lookup(IProductBN.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForm = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        cboTimkiem = new javax.swing.JComboBox();
        panleButton = new javax.swing.JPanel();
        buttonEdit = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.jLabel1.text")); // NOI18N

        txtTimKiem.setText(org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.txtTimKiem.text")); // NOI18N
        txtTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtTimKiemMousePressed(evt);
            }
        });
        txtTimKiem.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtTimKiemCaretUpdate(evt);
            }
        });

        cboTimkiem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tên", "ID", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panleButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(buttonEdit, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.buttonEdit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonSave, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.buttonSave.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonExit, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.buttonExit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonHelp, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.buttonHelp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonDelete, org.openide.util.NbBundle.getMessage(ListProductTopComponent.class, "ListProductTopComponent.buttonDelete.text")); // NOI18N

        javax.swing.GroupLayout panleButtonLayout = new javax.swing.GroupLayout(panleButton);
        panleButton.setLayout(panleButtonLayout);
        panleButtonLayout.setHorizontalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        panleButtonLayout.setVerticalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonSave)
                    .addComponent(buttonDelete)
                    .addComponent(buttonExit)
                    .addComponent(buttonHelp))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtTimKiemCaretUpdate
        String strTim = txtTimKiem.getText().trim();
        if (cboTimkiem.getSelectedIndex() == 0) {
            String[] header = {"Tên sản phẩm dịch vụ", "Mã sản phẩm dịch vụ", "Công ty", "Bộ phân (Phòng)", "Người chịu trách nhiệm", "Nhóm sản phẩm"};
            model = new DefaultTableModel(header, 0);
            List<Product> list = new ArrayList<Product>();
            list = productBN.filterProductByName(strTim);
            for (Product bean : list) {
                String[] rows = {bean.getProductName(), bean.getProductID(), bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID()};
                model.addRow(rows);
            }
            listProductPanel.getTableListPr().setModel(model);
        } else if (cboTimkiem.getSelectedIndex() == 1) {
            String[] header = {"Tên sản phẩm dịch vụ", "Mã sản phẩm dịch vụ", "Công ty", "Bộ phân (Phòng)", "Người chịu trách nhiệm", "Nhóm sản phẩm"};
            model = new DefaultTableModel(header, 0);
            List<Product> list = new ArrayList<Product>();
            list = productBN.filterProductByID(strTim);
            for (Product bean : list) {
                String[] rows = {bean.getProductName(), bean.getProductID(), bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID()};
                model.addRow(rows);
            }
            listProductPanel.getTableListPr().setModel(model);

        }
        setupTable();

    }//GEN-LAST:event_txtTimKiemCaretUpdate

    private void txtTimKiemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMousePressed
        txtTimKiem.setText("");
    }//GEN-LAST:event_txtTimKiemMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox cboTimkiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panleButton;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        String[] header = {"Tên sản phẩm dịch vụ", "Mã sản phẩm dịch vụ", "Công ty", "Bộ phân (Phòng)", "Người chịu trách nhiệm", "Nhóm sản phẩm"};
        model = new DefaultTableModel(header, 0);
        List<Product> list = new ArrayList<Product>();
        list = productBN.getAllProduct();
        for (Product bean : list) {
            String[] rows = {bean.getProductName(), bean.getProductID(), bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID(), bean.getProductgroups()};
            model.addRow(rows);
        }
        listProductPanel.getTableListPr().setModel(model);
        setupTable();
      
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton button = (JButton) e.getSource();
        if (button == buttonExit) {
            this.close();
        }
        if (button == buttonEdit) {
            buttonEdit.setEnabled(false);
        }

        if (button == buttonDelete) {
            int i = listProductPanel.getTableListPr().getSelectedRow();
            String strRow = listProductPanel.getTableListPr().getValueAt(i, 1).toString().trim();
            Product product = productBN.getProductByID(strRow);
            productBN.deleteProduct(product);
            model.removeRow(i);
        }
        if (button == buttonSave) {
            Product bean = null;

            String id = listProductPanel.getTableListPr().getValueAt(row, 1).toString().trim();
            String name = listProductPanel.getTableListPr().getValueAt(row, 0).toString().trim();
            String cty = listProductPanel.getTableListPr().getValueAt(row, 2).toString().trim();
            String bophan = listProductPanel.getTableListPr().getValueAt(row, 3).toString().trim();
            String person = listProductPanel.getTableListPr().getValueAt(row, 4).toString().trim();
            String nhomsp = listProductPanel.getTableListPr().getValueAt(row, 5).toString().trim();
            bean = new Product(id, name, cty, bophan, person, nhomsp);
            productBN.updateProduct(bean);
            this.close();
            this.open();
        }
    }

    public void mouseEvent(MouseEvent e) {
        int rows = listProductPanel.getTableListPr().getRowCount();
        int slectedRow = listProductPanel.getTableListPr().getSelectedRow();

        ProductTopComponent productTopComponent = new ProductTopComponent();

        for (int i = 0; i < rows; i++) {
            if (i == slectedRow) {
                if (e.getClickCount() == 2) {
                    if (buttonEdit.isEnabled()==false) {
                        String strRow = listProductPanel.getTableListPr().getValueAt(i, 1).toString().trim();
                        Product product = productBN.getProductByID(strRow);
                        productTopComponent.getProductPanel().getTableProduct().setModel(new javax.swing.table.DefaultTableModel(
                                new Object[][]{
                                    {"Tên sản phẩm dịch vụ", product.getProductName()},
                                    {"Mã sản phẩm dịch vụ", product.getProductID()},
                                    {"Công ty", product.getEnterpriseID()},
                                    {"Bộ phân (Phòng)", product.getDepartmentID()},
                                    {"Người chịu trách nhiệm", product.getPersonID()},
                                    {"Nhóm sản phẩm", product.getProductgroups()}},
                                new String[]{
                                    "", ""
                                }) {

                            boolean[] canEdit = new boolean[]{
                                false, true
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit[columnIndex];
                            }
                        });
                        ProductCell productCell = new ProductCell();
                        productCell.getTxtNamePro().setText(product.getProductName());
                        productCell.getTxtIdPro().setText(product.getProductID());

                        productTopComponent.getProductPanel().getTableProduct().getColumnModel().getColumn(1).setCellEditor(productCell);
                        productTopComponent.getProductPanel().getTableProduct().setEnabled(false);
                        productTopComponent.getPanelForm().removeAll();
                        productTopComponent.getPanelForm().add(productTopComponent.getProductPanel());
                        productTopComponent.getButtonEdit().setEnabled(true);
                        productTopComponent.open();
                        this.close();
                    }
                    if (buttonEdit.isEnabled()) {
                        row = i;
                    }
                    setupTable();
                }

            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mousePressed(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        mouseEvent(e);
    }

    protected void setupTable() {
        StripedTableCellRenderer.installInColumn(listProductPanel.getTableListPr(), new Color(250, 251, 252), null, new Color(242, 242, 242), null);
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.bom.operation.ui;

import java.awt.Color;
import vn.com.hkt.pilot.entities.Operation;
import vn.com.hkt.finance.api.ICalculate;
import vn.com.hkt.basic.api.IOperationBN;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import vn.com.hkt.pilot.ui.setup.StripedTableCellRenderer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//vn.com.hkt.bom.operation.ui//ListOperation//EN",
autostore = false)
@TopComponent.Description(preferredID = "ListOperationTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.bom.operation.ui.ListOperationTopComponent")
@ActionReference(path = "Menu/Sản Xuất & Đầu Vào" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ListOperationAction",
preferredID = "ListOperationTopComponent")
public final class ListOperationTopComponent extends TopComponent implements ActionListener, MouseListener {

    private ListOperationPanel listOperationPanel = new ListOperationPanel();
    private DefaultTableModel model;
    private IOperationBN operationBN;
    private ICalculate calculate;
    private static int row;

    public ListOperationTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ListOperationTopComponent.class, "CTL_ListOperationTopComponent"));
        setToolTipText(NbBundle.getMessage(ListOperationTopComponent.class, "HINT_ListOperationTopComponent"));


        panelForm.setLayout(new GridLayout());
        panelForm.add(listOperationPanel);

        listOperationPanel.getTableListO().addMouseListener(this);

        buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(this);
        buttonExit.addActionListener(this);
        buttonHelp.addActionListener(this);
        buttonSave.addActionListener(this);
        buttonDelete.addActionListener(this);

        this.operationBN = Lookup.getDefault().lookup(IOperationBN.class);
        this.calculate = Lookup.getDefault().lookup(ICalculate.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForm = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        cboTimkiem = new javax.swing.JComboBox();
        panleButton = new javax.swing.JPanel();
        buttonEdit = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonHelp = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTongThu = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTongChi = new javax.swing.JTextField();

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 147, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.jLabel1.text")); // NOI18N

        txtTimKiem.setText(org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.txtTimKiem.text")); // NOI18N
        txtTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtTimKiemMousePressed(evt);
            }
        });
        txtTimKiem.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtTimKiemCaretUpdate(evt);
            }
        });

        cboTimkiem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tên ", "ID", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panleButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(buttonEdit, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.buttonEdit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonSave, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.buttonSave.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonExit, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.buttonExit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonHelp, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.buttonHelp.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonDelete, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.buttonDelete.text")); // NOI18N

        javax.swing.GroupLayout panleButtonLayout = new javax.swing.GroupLayout(panleButton);
        panleButton.setLayout(panleButtonLayout);
        panleButtonLayout.setHorizontalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );
        panleButtonLayout.setVerticalGroup(
            panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panleButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panleButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonSave)
                    .addComponent(buttonDelete)
                    .addComponent(buttonExit)
                    .addComponent(buttonHelp))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.jLabel2.text")); // NOI18N

        txtTongThu.setText(org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.txtTongThu.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.jLabel3.text")); // NOI18N

        txtTongChi.setText(org.openide.util.NbBundle.getMessage(ListOperationTopComponent.class, "ListOperationTopComponent.txtTongChi.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTongChi)
                    .addComponent(txtTongThu, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addContainerGap(342, Short.MAX_VALUE))
            .addComponent(panleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTongThu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTongChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(panleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTimKiemCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtTimKiemCaretUpdate
        String strTim = txtTimKiem.getText().trim();
        if (cboTimkiem.getSelectedIndex() == 0) {
            String[] header = {"Tên nghiệp vụ", "Mã nghiệp vụ", "Ngày tháng năm", "Sản phảm dịch vụ", "Công ty",
                "Bộ phận (Phòng)", "Người chịu trách nhiệm", "Phân loại", "Số lượng", "Đơn giá", "Tổng giá"};
            model = new DefaultTableModel(header, 0);
            List<Operation> list = new ArrayList<Operation>();
            list = operationBN.filterOperationsByName(strTim);
            for (Operation bean : list) {
                String[] rows = {bean.getOperationName(), bean.getOperationID(), bean.getDateTime(), bean.getProductID(),
                    bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID(), bean.getClassification(), String.valueOf(bean.getNumber()),
                    String.valueOf(bean.getUnitPrice()), String.valueOf(bean.getSumPrice())};
                model.addRow(rows);
            }
            listOperationPanel.getTableListO().setModel(model);
        } else if (cboTimkiem.getSelectedIndex() == 1) {
            String[] header = {"Tên nghiệp vụ", "Mã nghiệp vụ", "Ngày tháng năm", "Sản phảm dịch vụ", "Công ty",
                "Bộ phận (Phòng)", "Người chịu trách nhiệm", "Phân loại", "Số lượng", "Đơn giá", "Tổng giá"};
            model = new DefaultTableModel(header, 0);
            List<Operation> list = new ArrayList<Operation>();
            list = operationBN.filterOperationsByID(strTim);
            for (Operation bean : list) {
                String[] rows = {bean.getOperationName(), bean.getOperationID(), bean.getDateTime(), bean.getProductID(),
                    bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID(), bean.getClassification(), String.valueOf(bean.getNumber()),
                    String.valueOf(bean.getUnitPrice()), String.valueOf(bean.getSumPrice())};
                model.addRow(rows);
            }
            listOperationPanel.getTableListO().setModel(model);
            
        }
        setupTable();
    }//GEN-LAST:event_txtTimKiemCaretUpdate

    private void txtTimKiemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMousePressed
        txtTimKiem.setText("");
    }//GEN-LAST:event_txtTimKiemMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox cboTimkiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panleButton;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtTongChi;
    private javax.swing.JTextField txtTongThu;
    // End of variables declaration//GEN-END:variables

    public void loadData() {
        String[] header = {"Tên nghiệp vụ", "Mã nghiệp vụ", "Ngày tháng năm", "Sản phảm dịch vụ", "Công ty",
            "Bộ phận (Phòng)", "Người chịu trách nhiệm", "Phân loại", "Số lượng", "Đơn giá", "Tổng giá"};

        model = new DefaultTableModel(header, 0);

        List<Operation> list = new ArrayList<Operation>();
        list = operationBN.getAllOperation();

        for (Operation bean : list) {
            String[] rows = {bean.getOperationName(), bean.getOperationID(), bean.getDateTime(), bean.getProductID(),
                bean.getEnterpriseID(), bean.getDepartmentID(), bean.getPersonID(), bean.getClassification(), String.valueOf(bean.getNumber()),
                String.valueOf(bean.getUnitPrice()), String.valueOf(bean.getSumPrice())};
            model.addRow(rows);
        }
        listOperationPanel.getTableListO().setModel(model);
        autoUpdateValues();

        setupTable();

    }

    @Override
    public void componentOpened() {
        loadData();
        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton button = (JButton) e.getSource();
        if (button == buttonExit) {
            this.close();
        }
        if (button == buttonDelete) {
            int i = listOperationPanel.getTableListO().getSelectedRow();
            String strRow = listOperationPanel.getTableListO().getValueAt(i, 1).toString().trim();
            Operation bean = operationBN.getOperationByID(strRow);
            if (operationBN.deleteOperation(bean)) {
                model.removeRow(i);
            } else {
                JOptionPane.showMessageDialog(null, "Deleted failed!");
            }

        }
        if (button == buttonEdit) {
            buttonEdit.setEnabled(false);
        }
        if (button == buttonSave) {
            Operation bean = null;
            String id = listOperationPanel.getTableListO().getValueAt(row, 1).toString().trim();
            String name = listOperationPanel.getTableListO().getValueAt(row, 0).toString().trim();
            String day = listOperationPanel.getTableListO().getValueAt(row, 2).toString().trim();
            String spdv = listOperationPanel.getTableListO().getValueAt(row, 3).toString().trim();
            String cty = listOperationPanel.getTableListO().getValueAt(row, 4).toString().trim();
            String bophan = listOperationPanel.getTableListO().getValueAt(row, 5).toString().trim();
            String person = listOperationPanel.getTableListO().getValueAt(row, 6).toString().trim();
            String phanloai = listOperationPanel.getTableListO().getValueAt(row, 7).toString().trim();
            String soluong = listOperationPanel.getTableListO().getValueAt(row, 8).toString().trim();
            String dongia = listOperationPanel.getTableListO().getValueAt(row, 9).toString().trim();
            String tonggia = listOperationPanel.getTableListO().getValueAt(row, 10).toString().trim();

            bean = new Operation(id, name, day, spdv, cty, bophan, person, phanloai, Integer.parseInt(soluong), Integer.parseInt(dongia), Integer.parseInt(tonggia));
            operationBN.updateOperation(bean);
            this.close();
            this.open();
        }
    }

    public void mouseEvent(MouseEvent e) {
        int rows = listOperationPanel.getTableListO().getRowCount();
        int slectedRow = listOperationPanel.getTableListO().getSelectedRow();
        OperationTopComponent operationTopComponent = new OperationTopComponent();
        for (int i = 0; i < rows; i++) {
            if (i == slectedRow) {
                if (e.getClickCount() == 2) {
                    if (buttonEdit.isEnabled()==false) {
                        String strRow = listOperationPanel.getTableListO().getValueAt(i, 1).toString().trim();
                        Operation bean = operationBN.getOperationByID(strRow);
                        if (bean != null) {
                            operationTopComponent.getOperationPanel().getTableO().setModel(new javax.swing.table.DefaultTableModel(
                                    new Object[][]{
                                        {"Tên nghiệp vụ", bean.getOperationName()},
                                        {"Mã nghiệp vụ", bean.getOperationID()},
                                        {"Ngày tháng năm", bean.getDateTime()},
                                        {"Sản phảm dịch vụ", bean.getProductID()},
                                        {"Công ty", bean.getEnterpriseID()},
                                        {"Bộ phận (Phòng)", bean.getDepartmentID()},
                                        {"Người chịu trách nhiệm", bean.getPersonID()},
                                        {"Phân loại", bean.getClassification()},
                                        {"Số lượng", String.valueOf(bean.getNumber())},
                                        {"Đơn giá", String.valueOf(bean.getUnitPrice())},
                                        {"Tổng giá", String.valueOf(bean.getSumPrice())},
                                        {"Đơn vị tính", " "},
                                        {"Đơn vị đo", " "}
                                    },
                                    new String[]{
                                        "", ""
                                    }) {

                                boolean[] canEdit = new boolean[]{
                                    false, true
                                };

                                public boolean isCellEditable(int rowIndex, int columnIndex) {
                                    return canEdit[columnIndex];
                                }
                            });
                            OperationCell operationCell = new OperationCell();
                            operationCell.getTxtNameO().setText(bean.getOperationName());
                            operationCell.getTxtIdO().setText(bean.getOperationID());
                            operationCell.getTxtDongia().setText(String.valueOf(bean.getUnitPrice()));
                            operationCell.getTxtSoluong().setText(String.valueOf(bean.getNumber()));
                            operationCell.getTxtTonggia().setText(String.valueOf(bean.getSumPrice()));

                            operationTopComponent.getOperationPanel().getTableO().getColumnModel().getColumn(1).setCellEditor(operationCell);
                            operationTopComponent.getOperationPanel().getTableO().setEnabled(false);
                            operationTopComponent.getPanelForm().removeAll();
                            operationTopComponent.getPanelForm().setLayout(new GridLayout(1, 1));
                            operationTopComponent.getPanelForm().add(operationTopComponent.getOperationPanel());
                            operationTopComponent.getButtonEdit().setEnabled(true);
                            operationTopComponent.open();

                            this.close();
                        }

                    }
                    if (buttonEdit.isEnabled()) {
                        row = i;
                    }
                    setupTable();
                }
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mousePressed(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        mouseEvent(e);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        mouseEvent(e);
    }

    protected void autoUpdateValues() {
        int sumImport = calculate.calculateSumImport();
        int sumExport = calculate.calculateSumExport();
        txtTongThu.setText(String.valueOf(sumImport));
        txtTongChi.setText(String.valueOf(sumExport));
    }

    protected void setupTable() {
        StripedTableCellRenderer.installInColumn(listOperationPanel.getTableListO(), new Color(250, 251, 252), null, new Color(242, 242, 242), null);
    }
}
